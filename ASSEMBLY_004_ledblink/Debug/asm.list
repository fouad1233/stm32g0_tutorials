
asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  000100bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
  6 .debug_line   0000008f  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 00000039  00000000  00000000  00010173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00000025  00000000  00000000  000101ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000014  00000000  00000000  000101d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000020  00000000  00000000  000101e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000045  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	4818      	ldr	r0, [pc, #96]	; (8000084 <delay_loop+0x6>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss 
	 * not necessary for rom only code 
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	4816      	ldr	r0, [pc, #88]	; (8000088 <delay_loop+0xa>)
	ldr r1, =_edata
 8000030:	4916      	ldr	r1, [pc, #88]	; (800008c <delay_loop+0xe>)
	ldr r2, =_sidata
 8000032:	4a17      	ldr	r2, [pc, #92]	; (8000090 <delay_loop+0x12>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a13      	ldr	r2, [pc, #76]	; (8000094 <delay_loop+0x16>)
	ldr r4, =_ebss
 8000046:	4c14      	ldr	r4, [pc, #80]	; (8000098 <delay_loop+0x1a>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:
/* main function */
.section .text

main:
  /*Enable GPIOC clock, bit 2 on IOPENR*/
  ldr r6, =RCC_IOPENR
 8000058:	4e10      	ldr	r6, [pc, #64]	; (800009c <delay_loop+0x1e>)
  ldr r5, [r6]
 800005a:	6835      	ldr	r5, [r6, #0]
  movs r4, 0x4
 800005c:	2404      	movs	r4, #4
  orrs r5, r5, r4
 800005e:	4325      	orrs	r5, r4
  str r5, [r6]
 8000060:	6035      	str	r5, [r6, #0]

  /* Set up PC6 for the LED (bits 12-13 in MODER)*/
  ldr r6, =GPIOC_MODER
 8000062:	4e0f      	ldr	r6, [pc, #60]	; (80000a0 <delay_loop+0x22>)
  ldr r5, [r6]
 8000064:	6835      	ldr	r5, [r6, #0]
  ldr r4, =0x3000
 8000066:	4c0f      	ldr	r4, [pc, #60]	; (80000a4 <delay_loop+0x26>)
  mvns r4, r4
 8000068:	43e4      	mvns	r4, r4
  ands r5, r5, r4
 800006a:	4025      	ands	r5, r4
  ldr r4, =0x1000
 800006c:	4c0e      	ldr	r4, [pc, #56]	; (80000a8 <delay_loop+0x2a>)
  orrs r5, r5, r4
 800006e:	4325      	orrs	r5, r4
  str r5, [r6]
 8000070:	6035      	str	r5, [r6, #0]

08000072 <blink_loop>:

  /* Blink the LED*/
  blink_loop:
  	ldr r6, =GPIOC_ODR
 8000072:	4e0e      	ldr	r6, [pc, #56]	; (80000ac <delay_loop+0x2e>)
    /*Read the current state of the LED*/
    ldr r5, [r6]
 8000074:	6835      	ldr	r5, [r6, #0]
    /*Set r4 to the value 0x40 (bit 6)*/
    movs r4, 0x40
 8000076:	2440      	movs	r4, #64	; 0x40
    //Toggle the LED state by XORing with 0x40
    eors r5, r5, r4
 8000078:	4065      	eors	r5, r4
   	// Update the LED state
    str r5, [r6]
 800007a:	6035      	str	r5, [r6, #0]

    // Delay between LED state changes (adjust for desired speed)
    ldr r0, =DELAY_FREQ  //4_000_000*4 = 16_000_000 cycle it will blink in 1 second
 800007c:	480c      	ldr	r0, [pc, #48]	; (80000b0 <delay_loop+0x32>)

0800007e <delay_loop>:
    delay_loop:
      subs r0, r0, #1 //This took 1 cycle
 800007e:	3801      	subs	r0, #1
      bne delay_loop // This took 3 cycle
 8000080:	d1fd      	bne.n	800007e <delay_loop>

    // Repeat the blinking loop
    b blink_loop
 8000082:	e7f6      	b.n	8000072 <blink_loop>
	ldr r0, =_estack
 8000084:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 8000088:	20000000 	.word	0x20000000
	ldr r1, =_edata
 800008c:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 8000090:	080000bc 	.word	0x080000bc
	ldr r2, =_sbss
 8000094:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 8000098:	20000000 	.word	0x20000000
  ldr r6, =RCC_IOPENR
 800009c:	40021034 	.word	0x40021034
  ldr r6, =GPIOC_MODER
 80000a0:	50000800 	.word	0x50000800
  ldr r4, =0x3000
 80000a4:	00003000 	.word	0x00003000
  ldr r4, =0x1000
 80000a8:	00001000 	.word	0x00001000
  	ldr r6, =GPIOC_ODR
 80000ac:	50000814 	.word	0x50000814
    ldr r0, =DELAY_FREQ  //4_000_000*4 = 16_000_000 cycle it will blink in 1 second
 80000b0:	00516155 	.word	0x00516155

Disassembly of section .init:

080000b4 <_init>:
 80000b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000b6:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

080000b8 <_fini>:
 80000b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ba:	46c0      	nop			; (mov r8, r8)
